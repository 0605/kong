worker_processes auto;
error_log logs/error.log debug;
worker_rlimit_nofile 84280;
daemon {DAEMON};

events {
    worker_connections 20480;
}

http {
  lua_package_path "{LUA_PATH}";
  lua_code_cache {LUA_CODE_CACHE};

  access_log logs/access.log;
  
  underscores_in_headers on;
  access_log on;
  tcp_nopush on;

  # Timeouts
  keepalive_timeout 60s;
  client_header_timeout 60s;
  client_body_timeout 60s;
  send_timeout 60s;
  reset_timedout_connection on;
  
  # Max Client request size
  client_max_body_size 50m;

  # Proxy buffers  
  proxy_buffer_size 128k;
  proxy_buffers 4 256k;
  proxy_busy_buffers_size 256k;

  # Proxy SSL
  proxy_ssl_server_name on;

  # Timer properties
  lua_max_running_timers 4096;
  lua_max_pending_timers 16384;

  init_by_lua 'main = require "resty.apenode.main"; main.init("{CONF_PATH}")';
  
  server {
    listen 8000;
    resolver 8.8.8.8;
    charset UTF-8;

    location / {
      # Assigns the default MIME-type to be used for files where the 
      # standard MIME map doesn't specify anything.
      default_type 'text/plain';

      # This property will be used later by proxy_pass
      set $backend_url nil;

      # Authenticate the user and load the API info
      access_by_lua "main.access()";

      # Proxy the request
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_pass $backend_url;
      
      # Add additional response headers
      header_filter_by_lua "main.header_filter()";

      # Change the response body
      body_filter_by_lua "main.body_filter()";

      # Log the request
      log_by_lua "main.log()";
    }

    error_page 500 /500.html;
    location = /500.html {
      internal;
      content_by_lua '
        local utils = require "resty.apenode.utils"
        utils.show_error(ngx.status, "Ops, an error occurred (╯°□°）╯")';
    }

  }

  server {
    listen 8001;

    location / {
      default_type application/json;
      content_by_lua '
        require("lapis").serve("resty.apenode.web.app")
      ';
    }

    location /static/ {
      alias static/;
    }

    location /favicon.ico {
      alias static/favicon.ico;
    }

  }

}