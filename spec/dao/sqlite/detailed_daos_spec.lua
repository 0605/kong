local configuration = require "spec.dao.sqlite.configuration"
local SQLiteFactory = require "apenode.dao.sqlite"

local dao_factory = SQLiteFactory(configuration)

describe("DetailedDaos", function()

  setup(function()
    dao_factory:populate(true)
  end)

  teardown(function()
    dao_factory:drop()
  end)

  describe("AccountsDao", function()

    describe("#get_by_provider_id()", function()
      it("should get an account by provider_id", function()
        local result, err = dao_factory.accounts:get_by_provider_id("provider_123")
        assert.truthy(result)
        assert.are.equal("provider_123", result.provider_id)
      end)
      it("should return nil if account does not exist", function()
        local result = dao_factory.accounts:get_by_provider_id("nothing")
        assert.falsy(result)
        assert.are.equal(nil, result)
      end)
    end)

  end)

  describe("APIsDao", function()

    describe("authentication_key_names serialization", function()
      describe("#save()", function()
        it("should serialize the authentication_key_names property", function()
          local api_to_save = dao_factory.fake_entity("api")
          local saved_api = dao_factory.apis:save(api_to_save)
          assert.truthy(saved_api.authentication_key_names)
          assert.is_true(type(saved_api.authentication_key_names) == "table")
          assert.are.same({ "X-Mashape-Key", "X-Apenode-Key" }, saved_api.authentication_key_names)
        end)
        it("should be an empty table with an empty authentication_key_names value", function()
          local api_to_save = dao_factory.fake_entity("api")
          api_to_save.authentication_key_names = nil
          local saved_api = dao_factory.apis:save(api_to_save)
          assert.truthy(saved_api.authentication_key_names)
          assert.is_true(type(saved_api.authentication_key_names) == "table")
          assert.are.same({}, saved_api.authentication_key_names)
        end)
      end)
      describe("#update()", function()
        it("should serialize the authentication_key_names property", function()
          local random_entity = dao_factory.fake_entity("api")
          random_entity.id = 1
          local result, err = dao_factory.apis:update(random_entity)
          assert.is_true(type(result.authentication_key_names) == "table")
        end)
      end)
      describe("#get_by_id()", function()
        it("should serialize the authentication_key_names property", function()
          local result = dao_factory.apis:get_by_id(4)
          assert.is_true(type(result.authentication_key_names) == "table")
        end)
      end)
      describe("#get_all()", function()
        it("should serialize the authentication_key_names property", function()
          local result, err = dao_factory.apis:get_all()
          for _,api in ipairs(result) do
            assert.is_true(type(api.authentication_key_names) == "table")
          end
        end)
      end)
    end)

    describe("#get_by_host()", function()
      it("should get an API by host", function()
        local result, err = dao_factory.apis:get_by_host("test3.com")
        assert.truthy(result)
        assert.are.equal("test3.com", result.public_dns)
      end)
      it("should return nil if API does not exist", function()
        local result = dao_factory.apis:get_by_host("nothing")
        assert.falsy(result)
        assert.are.equal(nil, result)
      end)
    end)

  end)

  describe("ApplicationsDao", function()

    describe("#get_by_account_id()", function()
      it("should get a list of applications by account_id", function()
        local result, count = dao_factory.applications:get_by_account_id(1)
        assert.truthy(count)
        assert.are.equal(1000, count)
        assert.truthy(result)
      end)
      it("should return an empty list if application does not exist", function()
        local result, count = dao_factory.applications:get_by_account_id("none")
        assert.truthy(count)
        assert.are.equal(0, count)
        assert.are.same({}, result)
      end)
    end)

  end)

end)
